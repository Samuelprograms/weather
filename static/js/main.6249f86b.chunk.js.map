{"version":3,"sources":["components.js","Cards.js","App.js","index.js"],"names":["Input","styled","input","FirstPage","div","props","back","SecondPage","CardsDiv","CardDiv","Button","button","Cards","data","temperature","map","info","index","time","split","src","condition","icon","alt","text","daily_will_it_rain","temp_c","temp_f","App","useState","setData","isLoading","setIsLoading","location","setLocation","url","setUrl","setTime","setTemperature","message","state","more","setMore","removeAccents","str","normalize","replace","useEffect","navigator","geolocation","watchPosition","position","coords","latitude","longitude","axios","get","then","current","forecast","country","city","name","toLowerCase","includes","region","windKph","wind_kph","actualDay","localtime","actualTime","lastUpdate","last_updated","isDay","is_day","cloud","tempC","tempF","maxTempC","forecastday","day","maxtemp_c","maxTempF","maxtemp_f","minTempC","mintemp_c","minTempF","mintemp_f","humidity","pressure","pressure_mb","code","lat","lon","catch","err","console","error","className","type","placeholder","onChange","e","target","value","style","top","left","onClick","parseInt","hour","log","slice","length","date","width","display","flexDirection","justifyContent","alignItems","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6249f86b.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nconst Input = styled.input`\r\n  border: none;\r\n  outline: none;\r\n  border-bottom: 3px solid black;\r\n  text-align: center;\r\n  background: transparent;\r\n  font-size: 20px;\r\n  &::placeholder {\r\n    color: #aaa;\r\n  }\r\n`;\r\nconst FirstPage = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-image: url(${(props) => props.back});\r\n  background-position: center center;\r\n  background-size: cover;\r\n`;\r\nconst SecondPage = styled.div`\r\n  background: #9b3fc1;\r\n  height: 100%;\r\n  padding: 50px 0;\r\n`;\r\nconst CardsDiv = styled.div`\r\n  display: flex;\r\n  width: 80%;\r\n  overflow-x: scroll;\r\n  overflow-y: hidden;\r\n  padding: 30px;\r\n  margin: 20px;\r\n  &::-webkit-scrollbar {\r\n    border-radius: 10px;\r\n    background: transparent;\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    border-radius: 10px;\r\n    background: linear-gradient(\r\n      to left,\r\n      rgba(100, 100, 100, 0.5),\r\n      rgba(500, 500, 500, 0.5)\r\n    );\r\n  }\r\n`;\r\nconst CardDiv = styled.div`\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n  margin-right: 5px;\r\n  padding: 70px 100px;\r\n  width: max-content;\r\n  text-align: center;\r\n  background-color: rgba(100, 100, 100, 0.5);\r\n  transition: all 0.2s ease-in;\r\n  &:hover {\r\n    transform: scale(1.1);\r\n    background-color: rgba(100, 100, 100, 0.7);\r\n  }\r\n`;\r\nconst Button = styled.button`\r\n  border: 1px solid black;\r\n  outline: none;\r\n  margin: 1px;\r\n  font-weight: 700;\r\n  background: rgba(100, 100, 100, 0.5);\r\n  color: white;\r\n  padding: 10px 30px;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in;\r\n  &:hover {\r\n    background: rgba(150, 150, 150, 0.7);\r\n  }\r\n`;\r\nexport { Input, FirstPage, SecondPage, CardsDiv, CardDiv, Button };\r\n","import React from \"react\";\r\nimport { CardsDiv, CardDiv } from \"./components\";\r\n\r\nconst Cards = ({ data, temperature }) => {\r\n  return (\r\n    <CardsDiv>\r\n      {data.map((info, index) => (\r\n        <CardDiv key={index}>\r\n          <p>{info.time.split(\" \")[1]}</p>\r\n          <br />\r\n          <img src={info.condition.icon} alt={info.condition.icon} />\r\n          <br />\r\n          <p>State: {info.condition.text}</p>\r\n          <br />\r\n          <p>Rain?: {info.daily_will_it_rain ? \"Yes\" : \"No\"}</p>\r\n          <br />\r\n          {temperature === \"Celsius\" ? (\r\n            <p>Temp: {info.temp_c} ºC</p>\r\n          ) : (\r\n            <p>Temp: {info.temp_f} ºF</p>\r\n          )}\r\n        </CardDiv>\r\n      ))}\r\n    </CardsDiv>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Input, FirstPage, SecondPage, Button } from \"./components\";\nimport Cards from \"./Cards\";\n\nimport \"./App.css\";\nimport axios from \"axios\";\n\nfunction App() {\n  const API_KEY = \"5b28acdebf394d5f8e2235338212906\";\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [location, setLocation] = useState();\n  const [url, setUrl] = useState();\n  const [time, setTime] = useState(\n    \"https://images.pexels.com/photos/531767/pexels-photo-531767.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\"\n  );\n  const [temperature, setTemperature] = useState(\"Celsius\");\n  const [more, setMore] = useState({ message: \"Show More\", state: false });\n\n  const removeAccents = (str) => {\n    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n  };\n\n  useEffect(() => {\n    const getLocation = () => {\n      navigator.geolocation.watchPosition((position) => {\n        setLocation(`${position.coords.latitude},${position.coords.longitude}`);\n      });\n    };\n    getLocation();\n    if (location) {\n      setUrl(\n        `http://api.weatherapi.com/v1/forecast.json?key=${API_KEY}&q=${location}&days=7`\n      );\n    }\n  }, [location]);\n\n  useEffect(() => {\n    if (location) {\n      axios\n        .get(url)\n        .then(({ data: { location, current, forecast } }) =>\n          setData({\n            country: location.country,\n            city: removeAccents(location.name.toLowerCase()).includes(location)\n              ? removeAccents(location.region)\n              : removeAccents(location.name),\n            windKph: current.wind_kph,\n            actualDay: location.localtime.split(\" \")[0],\n            actualTime: location.localtime.split(\" \")[1],\n            lastUpdate: current.last_updated.split(\" \")[1],\n            isDay: current.is_day,\n            cloud: current.cloud,\n            tempC: current.temp_c,\n            tempF: current.temp_f,\n            maxTempC: forecast.forecastday[0].day.maxtemp_c,\n            maxTempF: forecast.forecastday[0].day.maxtemp_f,\n            minTempC: forecast.forecastday[0].day.mintemp_c,\n            minTempF: forecast.forecastday[0].day.mintemp_f,\n            humidity: current.humidity,\n            pressure: current.pressure_mb / 1000,\n            code: current.condition,\n            latitude: location.lat,\n            longitude: location.lon,\n            forecast: forecast.forecastday,\n          })\n        )\n        .then(() => {\n          if (data.actualTime.split(\":\")[0] < 12) {\n            setTime(\n              \"https://images.pexels.com/photos/531767/pexels-photo-531767.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\"\n            );\n          } else if (\n            data.actualTime.split(\":\")[0] >= 12 &&\n            data.actualTime.split(\":\")[0] < 18\n          ) {\n            setTime(\n              \"https://images.pexels.com/photos/2386144/pexels-photo-2386144.jpeg?cs=srgb&dl=pexels-anderson-martins-2386144.jpg&fm=jpg\"\n            );\n          } else {\n            setTime(\n              \"https://images.pexels.com/photos/1624360/pexels-photo-1624360.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\"\n            );\n          }\n        })\n        .catch((err) => console.error(err));\n      setIsLoading(false);\n    }\n  }, [url, location, data.actualTime]);\n\n  if (isLoading || !data.code) {\n    return <h1>wait</h1>;\n  } else {\n    return (\n      <div className=\"App\">\n        <FirstPage back={time} >\n          <Input\n            type=\"text\"\n            placeholder=\"Search City\"\n            onChange={(e) =>\n              setLocation(removeAccents(e.target.value).toLowerCase())\n            }\n          />\n          <div style={{ position: \"fixed\", top: \"0\", left: \"0\" }}>\n            <Button onClick={() => setTemperature(\"Celsius\")}>ºC</Button>\n            <Button onClick={() => setTemperature(\"Fahrenheit\")}>ºF</Button>\n          </div>\n          <h1>\n            {data.city}, {data.country}\n          </h1>\n          <h2>\n            {parseInt(data.actualDay.split(\"-\")[2])} /{\" \"}\n            {parseInt(data.actualDay.split(\"-\")[1])} /\n            {data.actualDay.split(\"-\")[0]}\n          </h2>\n          <p>actual time: {data.actualTime}</p>\n          <p>last update: {data.lastUpdate}</p>\n          <p>{data.code.text}</p>\n          {temperature === \"Celsius\" ? (\n            <>\n              <p>temp: {data.tempC} °C</p>\n              <p>\n                Low: {data.minTempC}°C - High: {data.maxTempC}°C\n              </p>\n            </>\n          ) : (\n            <>\n              <p>Temp: {data.tempF} °F</p>\n              <p>\n                Low: {data.minTempF}°F High: {data.maxTempF}°F\n              </p>\n            </>\n          )}\n          <img src={data.code.icon} alt={data.code.text} />\n\n          {more.state && (\n            <>\n              {\" \"}\n              <p>\n                Cloud: {data.cloud} % / Humidity: {data.humidity} % / Pressure:{\" \"}\n                {data.pressure} bar / Wind velocity: {data.windKph} kph\n              </p>\n              <p>\n                Latitude: {data.latitude}° - Longitude: {data.longitude}°\n              </p>\n            </>\n          )}\n          <Button\n            onClick={() =>\n              setMore({\n                ...more,\n                state: !more.state,\n                message: more.state ? \"Show More\" : \"Show Less\",\n              })\n            }\n          >\n            {more.message}\n          </Button>\n          <Cards data={data.forecast[0].hour} temperature={temperature} />\n        </FirstPage>\n        <SecondPage>\n          {console.log(data.forecast.slice(1, data.forecast.length))}\n          {data.forecast\n            .slice(1, data.forecast.length)\n            .map(({ date, day, hour }, index) => (\n              <div\n                key={index}\n                style={{\n                  width: \"100%\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n              >\n                <h2>\n                  {parseInt(date.split(\"-\")[2])} /{\" \"}\n                  {parseInt(date.split(\"-\")[1])} /{date.split(\"-\")[0]}\n                </h2>\n                {temperature === \"Celsius\" ? (\n                  <p>\n                    Low: {day.mintemp_c}°C - High: {day.maxtemp_c}°C\n                  </p>\n                ) : (\n                  <p>\n                    Low: {day.mintemp_f}°F - High: {day.maxtemp_f}°F\n                  </p>\n                )}\n                <p>will it rain?: {day.daily_will_it_rain ? \"Yes\" : \"No\"}</p>\n                <Cards data={hour} temperature={temperature} />\n              </div>\n            ))}\n        </SecondPage>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}